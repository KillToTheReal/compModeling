import numpy as np
import matplotlib.pyplot as plt
import random
   
'''
Метод усечения (truncation method) - это один из способов генерации случайных чисел в заданном диапазоне, который основывается на усечении дробной части случайного вещественного числа. Этот метод генерирует равномерно распределенные случайные числа в интервале [a, b], где a и b - концы интервала.
Для генерации случайных чисел методом усечения можно использовать функцию random() модуля random библиотеки Python. Эта функция возвращает случайное вещественное число в интервале [0.0, 1.0).

Для получения случайного целого числа в интервале [a, b] с помощью метода усечения нужно выполнить следующие шаги:

1.Сгенерировать случайное вещественное число x в интервале [a, b+1).
2.Получить целое число y из x, отбросив дробную часть и вычтя a: y = int(x) - a.
3.Если y <= (b - a), то y является искомым случайным числом. Иначе повторить шаги 1-3.

Вот пример реализации этого метода на Python:

Здесь функция truncation_random(a, b) принимает на вход два параметра: концы интервала [a, b].
Внутри функции выполняется бесконечный цикл, пока не будет сгенерировано искомое случайное число.
В этом цикле сначала генерируется случайное вещественное число x в интервале [a, b+1), 
затем отбрасывается дробная часть и вычитается a, чтобы получить целое число y.
Если y находится в интервале [0, b-a], то оно является искомым случайным числом, и функция его возвращает с помощью оператора return.
Если y находится вне этого интервала, то цикл продолжается и генерируется новое случайное число.
'''

def truncation_random(a, b):
    while True:
        x = random.uniform(a, b+1)
        y = int(x) - a
        if y <= (b - a):
            return y


random_numbers_trunc = [truncation_random(0, 10) for _ in range(1000)]

plt.hist(sorted(random_numbers_trunc), bins=21, range=[-0.5, 10.5])
plt.xlabel('Random number')
plt.ylabel('Count')
plt.title('Truncation method')
plt.show()

# генерация случайного числа в интервале [a, b]
def random_sampling(a, b):
    return random.choice(range(a, b+1))

# пример генерации 10 случайных чисел в интервале [1, 100]
random_numbers_sampling = [random_sampling(0, 10) for _ in range(1000)]
print(random_numbers_sampling)
plt.hist(sorted(random_numbers_sampling), bins=21, range=[-0.5, 10.5])
plt.xlabel('Random number')
plt.ylabel('Count')
plt.title('Random sampling')
plt.show()

# Пример 1: Метод обратной функции

# Метод обратной функции - это метод генерации случайной величины с 
# использованием обратной функции распределения. Данный метод основан на том факте, 
# что если X - случайная величина с функцией распределения F(x), то Y = F^(-1)(U), где U - равномерно распределенная 
# на [0,1] случайная величина, будет иметь функцию распределения F(x).

# Для демонстрации данного метода сгенерируем случайную величину с экспоненциальным распределением.



# Функция обратной функции распределения экспоненциального распределения
def inv_exp_cdf(u, lambda_=1):
    return -np.log(1-u)/lambda_

# Генерация случайной величины с помощью метода обратной функции
n = 100000
U = np.random.uniform(size=n)
X = inv_exp_cdf(U)

# Построение гистограммы сравнения с теоретической плотностью распределения
x = np.linspace(0, 5, 10000)
y = lambda x: np.exp(-x)
plt.hist(X, density=True, bins=20)
plt.plot(x, y(x), 'r--', linewidth=2)
plt.show()